41 2 0
38 1
8 252 396 301 347 1 0
8 318 396 367 347 1 0
22 258 348 424 328 0 \NUL
Read Register 1 Address
8 432 396 481 347 1 0
8 498 396 547 347 1 0
22 438 348 604 328 0 \NUL
Read Register 2 Address
20 720 414 779 395 0
wadr_0
20 654 414 713 395 0
wadr_1
8 606 396 655 347 1 0
8 672 396 721 347 1 0
22 612 348 767 328 0 \NUL
Write Register Address
20 480 414 539 395 0
adr2_1
20 546 414 605 395 0
adr2_0
20 366 414 425 395 0
adr1_0
20 300 414 359 395 0
adr1_1
19 174 108 233 89 0
reg0_2
19 162 84 221 65 0
reg0_3
19 198 156 257 137 0
reg0_0
19 186 132 245 113 0
reg0_1
11 258 108 285 10 0 1
22 144 36 255 16 0 \NUL
Register 0 Value
19 330 108 389 89 0
reg1_2
19 318 84 377 65 0
reg1_3
19 354 156 413 137 0
reg1_0
19 342 132 401 113 0
reg1_1
11 414 108 441 10 0 1
22 300 36 411 16 0 \NUL
Register 1 Value
19 486 108 545 89 0
reg2_2
19 474 84 533 65 0
reg2_3
19 510 156 569 137 0
reg2_0
19 498 132 557 113 0
reg2_1
11 570 108 597 10 0 1
22 456 36 567 16 0 \NUL
Register 2 Value
19 642 108 701 89 0
reg3_2
19 630 84 689 65 0
reg3_3
19 666 156 725 137 0
reg3_0
19 654 132 713 113 0
reg3_1
11 726 108 753 10 0 1
22 612 36 723 16 0 \NUL
Register 3 Value
19 648 264 707 245 0
alu_2
19 636 240 695 221 0
alu_3
19 672 312 731 293 0
alu_0
19 660 288 719 269 0
alu_1
11 732 264 759 166 0 1
22 648 192 724 172 0 \NUL
ALU Output
25 12 528 119 432
8 12 396 61 347 1 0
8 6 288 55 239 1 1
8 6 192 55 143 1 1
20 66 414 125 395 0
sel
20 60 210 119 191 0
clear
20 150 510 209 491 0
kpad_3
20 138 534 197 515 0
kpad_2
20 132 558 191 539 0
kpad_1
20 120 582 179 563 0
kpad_0
19 336 264 395 245 0
in1_2
19 324 240 383 221 0
in1_3
19 360 312 419 293 0
in1_0
19 348 288 407 269 0
in1_1
11 420 264 447 166 0 1
22 336 192 414 172 0 \NUL
ALU Input 1
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
19 174 264 233 245 0
kpad_2
19 162 240 221 221 0
kpad_3
19 198 312 257 293 0
kpad_0
19 186 288 245 269 0
kpad_1
11 258 264 285 166 0 1
22 150 192 249 172 0 \NUL
Keypad Output
22 12 144 117 124 0 \NUL
Clear Registers
22 18 324 100 304 0 \NUL
Store Select
20 60 294 119 275 0
update
22 12 240 121 220 0 \NUL
Update Register
19 492 264 551 245 0
in2_2
19 480 240 539 221 0
in2_3
19 516 312 575 293 0
in2_0
19 504 288 563 269 0
in2_1
11 576 264 603 166 0 1
22 492 192 570 172 0 \NUL
ALU Input 2
22 18 348 230 328 0 \NUL
0 = Keypad input, 1 = ALU result
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 228 450 478 430 0 \NUL
Select clear to initialize registers to 0.
22 228 474 557 454 0 \NUL
Select store select to choose which value to store.
22 228 498 508 478 0 \NUL
Choose read and write register addresses.
22 228 522 727 502 0 \NUL
Read addresses = reg sources of ALU inputs, Write address = reg to save to
22 228 546 480 526 0 \NUL
Press update to save value to register
22 228 594 668 574 0 \NUL
You are only permitted to modify the header comment on this page.
1 652 371 655 404
1 718 371 721 404
1 478 371 481 404
1 544 371 547 404
1 364 371 367 404
1 298 371 301 404
1 218 74 259 74
1 259 80 230 98
1 259 86 242 122
1 259 92 254 146
1 374 74 415 74
1 415 80 386 98
1 415 86 398 122
1 415 92 410 146
1 530 74 571 74
1 571 80 542 98
1 571 86 554 122
1 571 92 566 146
1 686 74 727 74
1 727 80 698 98
1 727 86 710 122
1 727 92 722 146
1 692 230 733 230
1 733 236 704 254
1 733 242 716 278
1 733 248 728 302
1 61 200 52 167
1 67 404 58 371
1 380 230 421 230
1 421 236 392 254
1 421 242 404 278
1 421 248 416 302
1 151 500 116 500
1 139 524 116 506
1 133 548 116 512
1 121 572 116 518
1 218 230 259 230
1 259 236 230 254
1 259 242 242 278
1 259 248 254 302
1 61 284 52 263
1 536 230 577 230
1 577 236 548 254
1 577 242 560 278
1 577 248 572 302
38 2
22 294 42 484 22 0 \NUL
Placeholder signal/recievers
22 18 480 388 460 0 \NUL
These are only present so circuit simulates without error
22 18 504 290 484 0 \NUL
Remove these once logic is implemented
22 18 528 266 508 0 \NUL
You are permitted to modify this page
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
38 3
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
20 398 234 457 215 0
alu_3
20 276 393 335 374 0
alu_2
20 588 416 647 397 0
alu_1
20 707 231 766 212 0
alu_0
22 369 132 403 112 0 \NUL
ALU 
31 330 239 379 154 0 1
19 219 287 278 268 0
in1_1
19 228 309 287 290 0
in1_0
19 218 163 277 144 0
in2_2
19 206 214 265 195 0
in2_0
19 208 242 267 223 0
in2_3
19 211 186 270 167 0
in2_1
31 207 429 256 344 0 1
19 98 484 157 465 0
in1_1
19 107 506 166 487 0
in1_0
19 84 445 143 426 0
in2_2
19 88 387 147 368 0
in2_0
19 87 415 146 396 0
in2_3
19 90 359 149 340 0
in2_1
31 518 452 567 367 0 1
19 405 487 464 468 0
in1_1
19 414 509 473 490 0
in1_0
19 405 416 464 397 0
in2_2
19 428 366 487 347 0
in2_0
19 412 392 471 373 0
in2_3
19 404 441 463 422 0
in2_1
31 643 267 692 182 0 1
19 533 292 592 273 0
in1_1
19 542 314 601 295 0
in1_0
14 267 333 316 284
14 580 340 629 291
14 160 533 209 484
14 460 542 509 493
19 530 190 589 171 0
in2_2
19 522 248 581 229 0
in2_0
19 553 165 612 146 0
in2_3
19 521 216 580 197 0
in2_1
22 365 35 777 15 0 \NUL
The ALU takes in the the outputs from the second read register,
22 304 60 777 40 0 \NUL
with the first and second outputs from the first register as the conditions,
22 251 84 779 64 0 \NUL
and outputs the bitwise right rotation of ALU Input 2 by the amount in ALU input 1.
1 331 181 274 153
1 331 187 267 176
1 331 193 262 204
1 331 199 264 232
1 331 217 275 277
1 331 223 284 299
1 313 308 331 235
1 644 245 589 282
1 644 251 598 304
1 626 315 644 263
1 708 221 689 221
1 399 224 376 193
1 208 371 146 349
1 208 377 144 377
1 208 383 143 405
1 208 389 140 435
1 644 209 609 155
1 644 215 586 180
1 644 221 577 206
1 644 227 578 238
1 208 407 154 474
1 208 413 163 496
1 208 425 206 508
1 519 394 484 356
1 519 400 468 382
1 519 406 461 406
1 519 412 460 431
1 519 430 461 477
1 519 436 470 499
1 519 448 506 517
1 589 406 564 406
1 277 383 253 383
38 4
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 339 131 455 111 0 \NUL
Register Selector
31 354 296 403 211 0 4
19 223 334 282 315 0
update
5 299 349 348 300 0
5 423 219 472 170 0
5 432 255 481 206 0
5 432 293 481 244 0
5 421 332 470 283 0
19 255 271 314 252 0
wadr_1
19 254 292 313 273 0
wadr_0
20 518 317 577 298 0
reg0
20 518 278 577 259 0
reg1
20 516 240 575 221 0
reg2
20 515 204 574 185 0
reg3
22 196 401 604 381 0 \NUL
The register selector decides which register to send the value 
22 190 426 609 406 0 \NUL
to when the user presses update, depending on the combination
22 215 450 582 430 0 \NUL
of the switches on the write address, using a 2:4 Demux
1 279 324 300 324
1 345 324 355 292
1 424 194 400 238
1 433 230 400 244
1 433 268 400 250
1 422 307 400 256
1 516 194 469 194
1 517 230 478 230
1 519 307 467 307
1 519 268 478 268
1 355 280 310 282
1 355 274 311 261
38 5
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 356 143 427 123 0 \NUL
Register 0
24 265 273 314 201 1 1 1
15 223 201 272 152
20 341 231 400 212 0
reg0_0
19 161 315 220 296 0
clear
5 227 330 276 281 0
19 22 269 81 250 0
kpad_0
3 138 219 187 170 0 0
3 138 270 187 221 0 0
4 195 246 244 197 0 0
5 82 259 131 210 0
19 24 225 83 206 0
sel
20 707 274 766 255 0
reg0_2
20 711 492 770 473 0
reg0_3
20 337 443 396 424 0
reg0_1
24 632 316 681 244 1 1 1
15 590 244 639 195
19 528 358 587 339 0
clear
5 594 373 643 324 0
3 505 262 554 213 0 0
3 505 313 554 264 0 0
5 449 302 498 253 0
19 391 268 450 249 0
sel
24 264 485 313 413 1 1 1
15 222 413 271 364
19 160 527 219 508 0
clear
5 226 542 275 493 0
3 137 431 186 382 0 0
3 137 482 186 433 0 0
4 194 458 243 409 0 0
5 81 471 130 422 0
19 23 437 82 418 0
sel
3 137 482 186 433 0 0
24 639 533 688 461 1 1 1
15 597 461 646 412
19 535 575 594 556 0
clear
5 606 589 655 540 0
3 512 479 561 430 0 0
3 512 530 561 481 0 0
4 569 506 618 457 0 0
5 456 519 505 470 0
19 398 485 457 466 0
sel
19 559 536 618 517 0
reg0
19 194 490 253 471 0
reg0
19 562 317 621 298 0
reg0
19 198 279 257 260 0
reg0
4 562 289 611 240 0 0
19 25 481 84 462 0
kpad_1
19 396 529 455 510 0
kpad_3
19 390 312 449 293 0
kpad_2
19 417 233 476 214 0
alu_2
19 424 450 483 431 0
alu_3
19 26 189 85 170 0
alu_0
19 24 402 83 383 0
alu_1
22 267 25 793 5 0 \NUL
Register 0 is enabled with a plus, and only goes through with a signal from reg0,
22 266 48 794 28 0 \NUL
 which is only received if register 0 is the destination determined by the selector.
22 183 71 795 51 0 \NUL
Through a D Flip-Flop, the output is a single bit that is then sent to the ALU and read registers.
22 324 94 794 74 0 \NUL
The clear is connected to the CLR so that if the user were to press clear,
22 552 117 796 97 0 \NUL
 it would clear the register value to 0.
1 269 176 279 203
1 311 221 342 221
1 273 305 279 269
1 217 305 228 305
1 78 259 139 259
1 184 194 196 207
1 184 245 196 235
1 139 231 128 234
1 83 234 80 215
1 80 215 139 208
1 266 221 241 221
1 266 239 254 269
1 450 277 447 258
1 506 274 495 277
1 506 251 447 258
1 563 278 551 288
1 563 250 551 237
1 633 264 608 264
1 633 282 618 307
1 595 348 584 348
1 640 348 646 312
1 708 264 678 264
1 640 481 615 481
1 570 467 558 454
1 558 505 570 495
1 513 491 502 494
1 513 468 454 475
1 457 494 454 475
1 640 499 615 526
1 607 564 591 565
1 652 564 653 529
1 82 446 79 427
1 138 443 127 446
1 138 420 79 427
1 195 419 183 406
1 195 447 183 457
1 265 433 240 433
1 278 415 268 388
1 338 433 310 433
1 227 517 216 517
1 272 517 278 481
1 265 451 250 480
1 646 246 636 219
1 643 436 653 463
1 138 471 81 471
1 712 482 685 481
1 506 302 446 302
1 513 519 452 519
1 82 179 139 180
1 80 392 138 392
1 473 223 506 223
1 480 440 513 440
38 6
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 356 143 427 123 0 \NUL
Register 1
24 265 273 314 201 1 1 1
15 223 201 272 152
19 161 315 220 296 0
clear
5 227 330 276 281 0
20 719 262 778 243 0
reg1_3
20 716 472 775 453 0
reg1_2
20 327 442 386 423 0
reg1_1
20 340 231 399 212 0
reg1_0
24 264 484 313 412 1 1 1
15 222 412 271 363
19 160 526 219 507 0
clear
5 226 541 275 492 0
24 646 514 695 442 1 1 1
15 604 442 653 393
19 542 556 601 537 0
clear
5 608 571 657 522 0
24 655 304 704 232 1 1 1
19 547 346 606 327 0
clear
5 613 361 662 312 0
15 620 227 669 178
3 144 220 193 171 0 0
3 144 271 193 222 0 0
4 197 246 246 197 0 0
5 92 265 141 216 0
19 31 231 90 212 0
sel
3 532 251 581 202 0 0
3 532 302 581 253 0 0
4 585 277 634 228 0 0
5 480 296 529 247 0
19 419 262 478 243 0
sel
3 530 461 579 412 0 0
3 530 512 579 463 0 0
4 583 487 632 438 0 0
5 478 506 527 457 0
19 417 472 476 453 0
sel
19 25 480 84 461 0
kpad_1
3 141 430 190 381 0 0
3 141 481 190 432 0 0
4 194 456 243 407 0 0
5 89 475 138 426 0
19 28 441 87 422 0
sel
19 190 488 249 469 0
reg1
19 196 279 255 260 0
reg1
19 587 308 646 289 0
reg1
19 574 520 633 501 0
reg1
19 27 270 86 251 0
kpad_0
19 416 511 475 492 0
kpad_2
19 418 301 477 282 0
kpad_3
19 413 432 472 413 0
alu_2
19 416 222 475 203 0
alu_3
19 29 191 88 172 0
alu_0
19 24 401 83 382 0
alu_1
22 267 25 793 5 0 \NUL
Register 1 is enabled with a plus, and only goes through with a signal from reg1,
22 266 48 794 28 0 \NUL
 which is only received if register 1 is the destination determined by the selector.
22 183 71 795 51 0 \NUL
Through a D Flip-Flop, the output is a single bit that is then sent to the ALU and read registers.
22 324 94 794 74 0 \NUL
The clear is connected to the CLR so that if the user were to press clear,
22 549 118 793 98 0 \NUL
 it would clear the register value to 0.
1 269 176 279 203
1 273 305 279 269
1 217 305 228 305
1 341 221 311 221
1 268 387 278 414
1 272 516 278 480
1 216 516 227 516
1 650 417 660 444
1 654 546 660 510
1 598 546 609 546
1 659 336 669 300
1 603 336 614 336
1 701 252 720 252
1 692 462 717 462
1 310 432 328 432
1 190 195 198 207
1 190 246 198 235
1 145 232 138 240
1 93 240 87 221
1 87 221 145 209
1 669 234 666 202
1 243 221 266 221
1 578 226 586 238
1 578 277 586 266
1 533 263 526 271
1 481 271 475 252
1 475 252 533 240
1 576 436 584 448
1 576 487 584 476
1 531 473 524 481
1 479 481 473 462
1 473 462 531 450
1 187 405 195 417
1 187 456 195 445
1 142 442 135 450
1 90 450 84 431
1 84 431 142 419
1 81 470 142 470
1 647 462 629 462
1 656 252 631 252
1 265 432 240 431
1 266 239 252 269
1 656 270 643 298
1 265 450 246 478
1 647 480 630 510
1 145 260 83 260
1 533 291 474 291
1 531 501 472 501
1 533 212 472 212
1 531 422 469 422
1 142 391 80 391
1 145 181 85 181
38 7
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 356 144 427 124 0 \NUL
Register 2
24 265 273 314 201 1 1 1
15 223 201 272 152
19 161 315 220 296 0
clear
5 227 330 276 281 0
20 714 468 773 449 0
reg2_3
20 720 280 779 261 0
reg2_2
20 332 428 391 409 0
reg2_1
20 338 231 397 212 0
reg2_0
24 658 322 707 250 1 1 1
15 616 250 665 201
19 554 364 613 345 0
clear
5 620 379 669 330 0
24 264 470 313 398 1 1 1
15 222 398 271 349
19 160 512 219 493 0
clear
5 226 527 275 478 0
24 644 510 693 438 1 1 1
15 602 438 651 389
19 540 552 599 533 0
clear
5 606 567 655 518 0
19 27 234 86 215 0
sel
5 98 268 147 219 0
4 201 246 250 197 0 0
3 144 274 193 225 0 0
3 144 223 193 174 0 0
19 421 319 480 300 0
kpad_2
19 425 280 484 261 0
sel
5 496 314 545 265 0
4 599 295 648 246 0 0
3 542 320 591 271 0 0
3 542 269 591 220 0 0
19 32 429 91 410 0
sel
5 103 463 152 414 0
4 206 442 255 393 0 0
3 149 469 198 420 0 0
3 149 418 198 369 0 0
19 413 469 472 450 0
sel
5 484 503 533 454 0
4 587 482 636 433 0 0
3 530 509 579 460 0 0
3 530 458 579 409 0 0
19 198 481 257 462 0
reg2
19 571 521 630 502 0
reg2
19 598 329 657 310 0
reg2
19 190 280 249 261 0
reg2
19 22 273 81 254 0
kpad_0
19 31 468 90 449 0
kpad_1
19 411 508 470 489 0
kpad_3
19 423 240 482 221 0
alu_2
19 412 429 471 410 0
alu_3
19 23 194 82 175 0
alu_0
19 30 389 89 370 0
alu_1
22 267 25 793 5 0 \NUL
Register 2 is enabled with a plus, and only goes through with a signal from reg2,
22 266 48 794 28 0 \NUL
 which is only received if register 2 is the destination determined by the selector.
22 183 71 795 51 0 \NUL
Through a D Flip-Flop, the output is a single bit that is then sent to the ALU and read registers.
22 324 94 794 74 0 \NUL
The clear is connected to the CLR so that if the user were to press clear,
22 549 118 793 98 0 \NUL
 it would clear the register value to 0.
1 269 176 279 203
1 273 305 279 269
1 217 305 228 305
1 339 221 311 221
1 662 225 672 252
1 666 354 672 318
1 610 354 621 354
1 268 373 278 400
1 272 502 278 466
1 216 502 227 502
1 648 413 658 440
1 652 542 658 506
1 596 542 607 542
1 715 458 690 458
1 333 418 310 418
1 721 270 704 270
1 83 224 145 212
1 99 243 83 224
1 145 235 144 243
1 190 249 202 235
1 190 198 202 207
1 481 270 543 258
1 497 289 481 270
1 543 281 542 289
1 588 295 600 284
1 588 244 600 256
1 477 309 543 309
1 88 419 150 407
1 104 438 88 419
1 150 430 149 438
1 195 444 207 431
1 195 393 207 403
1 469 459 531 447
1 485 478 469 459
1 531 470 530 478
1 576 484 588 471
1 576 433 588 443
1 659 270 645 270
1 645 458 633 457
1 265 418 252 417
1 266 221 247 221
1 266 239 246 270
1 659 288 654 319
1 265 436 254 471
1 645 476 627 511
1 145 263 78 263
1 150 458 87 458
1 531 498 467 498
1 543 230 479 230
1 531 419 468 419
1 150 379 86 379
1 145 184 79 184
38 8
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 356 143 427 123 0 \NUL
Register 3
24 265 273 314 201 1 1 1
15 223 201 272 152
19 161 315 220 296 0
clear
5 227 330 276 281 0
20 709 450 768 431 0
reg3_3
20 705 268 764 249 0
reg3_2
20 336 422 395 403 0
reg3_1
20 332 231 391 212 0
reg3_0
24 269 464 318 392 1 1 1
15 227 392 276 343
19 165 506 224 487 0
clear
5 231 521 280 472 0
24 623 324 672 252 1 1 1
15 581 252 630 203
19 519 366 578 347 0
clear
5 585 381 634 332 0
24 614 519 663 447 1 1 1
15 572 447 621 398
19 510 561 569 542 0
clear
5 576 576 625 527 0
3 514 273 563 224 0 0
3 514 324 563 275 0 0
4 566 298 615 249 0 0
5 460 316 509 267 0
19 405 279 464 260 0
sel
3 143 221 192 172 0 0
3 143 272 192 223 0 0
4 206 247 255 198 0 0
5 89 264 138 215 0
19 31 220 90 201 0
sel
19 372 518 431 499 0
kpad_3
3 488 468 537 419 0 0
3 488 519 537 470 0 0
4 552 493 601 444 0 0
5 434 511 483 462 0
19 369 467 428 448 0
sel
3 149 410 198 361 0 0
3 149 461 198 412 0 0
4 213 435 262 386 0 0
5 95 453 144 404 0
19 30 409 89 390 0
sel
19 182 473 241 454 0
reg3
19 187 283 246 264 0
reg3
19 555 332 614 313 0
reg3
19 534 527 593 508 0
reg3
19 26 271 85 252 0
kpad_0
19 27 460 86 441 0
kpad_1
19 402 323 461 304 0
kpad_2
19 420 244 479 225 0
alu_2
19 409 439 468 420 0
alu_3
19 31 192 90 173 0
alu_0
19 30 381 89 362 0
alu_1
22 267 26 793 6 0 \NUL
Register 3 is enabled with a plus, and only goes through with a signal from reg3,
22 266 48 794 28 0 \NUL
 which is only received if register 3 is the destination determined by the selector.
22 183 71 795 51 0 \NUL
Through a D Flip-Flop, the output is a single bit that is then sent to the ALU and read registers.
22 324 94 794 74 0 \NUL
The clear is connected to the CLR so that if the user were to press clear,
22 550 117 794 97 0 \NUL
 it would clear the register value to 0.
1 269 176 279 203
1 273 305 279 269
1 217 305 228 305
1 273 367 283 394
1 277 496 283 460
1 221 496 232 496
1 627 227 637 254
1 631 356 637 320
1 575 356 586 356
1 618 422 628 449
1 622 551 628 515
1 566 551 577 551
1 710 440 660 467
1 706 258 669 272
1 333 221 311 221
1 337 412 315 412
1 560 248 567 259
1 560 299 567 287
1 515 285 506 291
1 461 291 461 269
1 461 269 515 262
1 189 196 207 208
1 189 247 207 236
1 144 233 135 239
1 90 239 87 210
1 87 210 144 210
1 534 443 553 454
1 534 494 553 482
1 489 480 480 486
1 435 486 425 457
1 425 457 489 457
1 428 508 489 508
1 195 385 214 396
1 195 436 214 424
1 150 422 141 428
1 96 428 86 399
1 86 399 150 399
1 624 272 612 273
1 615 467 598 468
1 266 221 252 222
1 266 239 243 273
1 624 290 611 322
1 615 485 590 517
1 270 430 238 463
1 270 412 259 410
1 144 261 82 261
1 150 450 83 450
1 515 313 458 313
1 144 182 87 182
1 150 371 86 371
1 515 234 476 234
1 489 429 465 429
38 9
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 378 142 487 122 0 \NUL
Read Register 1
19 376 271 435 252 0
reg0_2
19 374 470 433 451 0
reg0_3
19 31 268 90 249 0
reg0_0
19 35 448 94 429 0
reg0_1
19 376 246 435 227 0
reg1_2
19 374 446 433 427 0
reg1_3
19 32 245 91 226 0
reg1_0
19 35 426 94 407 0
reg1_1
19 375 222 434 203 0
reg2_2
19 374 420 433 401 0
reg2_3
19 30 222 89 203 0
reg2_0
19 36 402 95 383 0
reg2_1
19 376 197 435 178 0
reg3_2
19 375 395 434 376 0
reg3_3
19 32 199 91 180 0
reg3_0
19 37 380 96 361 0
reg3_1
31 160 261 209 176 0 1
19 45 299 104 280 0
adr1_1
19 50 317 109 298 0
adr1_0
19 47 476 106 457 0
adr1_1
19 59 496 118 477 0
adr1_0
19 392 303 451 284 0
adr1_1
19 410 322 469 303 0
adr1_0
19 390 506 449 487 0
adr1_1
19 403 526 462 507 0
adr1_0
20 598 418 657 399 0
in1_3
20 593 217 652 198 0
in1_2
20 247 406 306 387 0
in1_1
20 226 225 285 206 0
in1_0
31 183 442 232 357 0 1
31 520 253 569 168 0 1
31 521 454 570 369 0 1
14 97 341 146 292
14 459 346 508 297
14 135 520 184 471
14 466 550 515 501
22 292 25 793 5 0 \NUL
Each 4:1 mux focuses on the same bit from each register, and then based on
22 271 48 790 28 0 \NUL
the value of address 1, the chosen register's value is sent through to the output
22 397 70 792 50 0 \NUL
and assigned to the respective bits name (in1_0, in1_1, etc).
22 239 93 793 73 0 \NUL
The outputs are then used to create the final ALU output, if ALU is the desired course.
1 161 203 88 189
1 161 209 86 212
1 161 215 88 235
1 161 221 87 258
1 161 239 101 289
1 161 245 106 307
1 184 384 93 370
1 184 390 92 392
1 184 396 91 416
1 184 402 91 438
1 184 420 103 466
1 184 426 115 486
1 522 396 431 385
1 522 402 430 410
1 522 408 430 436
1 522 414 430 460
1 522 432 446 496
1 522 438 459 516
1 521 195 432 187
1 521 201 431 212
1 521 207 432 236
1 521 213 432 261
1 521 231 448 293
1 521 237 466 312
1 594 207 566 207
1 599 408 567 408
1 248 396 229 396
1 227 215 206 215
1 505 321 521 249
1 512 525 522 450
1 181 495 184 438
1 143 316 161 257
38 10
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 114 10 0 \NUL
Sandhu, Tanvir
22 12 54 75 34 0 \NUL
taksandh
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 378 142 487 122 0 \NUL
Read Register 2
19 376 271 435 252 0
reg0_2
19 374 444 433 425 0
reg0_3
19 31 268 90 249 0
reg0_0
19 35 448 94 429 0
reg0_1
19 376 246 435 227 0
reg1_2
19 374 420 433 401 0
reg1_3
19 32 245 91 226 0
reg1_0
19 35 426 94 407 0
reg1_1
19 375 222 434 203 0
reg2_2
19 374 394 433 375 0
reg2_3
19 30 222 89 203 0
reg2_0
19 36 402 95 383 0
reg2_1
19 376 197 435 178 0
reg3_2
19 375 369 434 350 0
reg3_3
19 32 199 91 180 0
reg3_0
19 37 380 96 361 0
reg3_1
31 160 261 209 176 0 1
31 179 442 228 357 0 1
31 520 253 569 168 0 1
31 521 428 570 343 0 1
19 49 293 108 274 0
adr2_1
19 61 312 120 293 0
adr2_0
20 597 392 656 373 0
in2_3
20 606 217 665 198 0
in2_2
20 255 406 314 387 0
in2_1
20 240 225 299 206 0
in2_0
19 58 478 117 459 0
adr2_1
19 67 497 126 478 0
adr2_0
19 395 300 454 281 0
adr2_1
19 409 319 468 300 0
adr2_0
19 395 475 454 456 0
adr2_1
19 407 494 466 475 0
adr2_0
14 99 339 148 290
14 455 344 504 295
14 469 518 518 469
14 124 521 173 472
22 292 25 793 5 0 \NUL
Each 4:1 mux focuses on the same bit from each register, and then based on
22 272 48 791 28 0 \NUL
the value of address 2, the chosen register's value is sent through to the output
22 397 70 792 50 0 \NUL
and assigned to the respective bits name (in2_0, in2_1, etc).
22 239 93 793 73 0 \NUL
The outputs are then used to create the final ALU output, if ALU is the desired course.
1 161 203 88 189
1 161 209 86 212
1 161 215 88 235
1 161 221 87 258
1 180 384 93 370
1 180 390 92 392
1 180 396 91 416
1 180 402 91 438
1 522 370 431 359
1 522 376 430 384
1 522 382 430 410
1 522 388 430 434
1 521 195 432 187
1 521 201 431 212
1 521 207 432 236
1 521 213 432 261
1 241 215 206 215
1 607 207 566 207
1 598 382 567 382
1 256 396 225 396
1 180 420 114 468
1 180 426 123 487
1 161 239 105 283
1 161 245 117 302
1 522 406 451 465
1 522 412 463 484
1 521 231 451 290
1 521 237 465 309
1 145 314 161 257
1 501 319 521 249
1 515 493 522 424
1 170 496 180 438
39 16777215
47 0
40 1 6 6
50 800 600
51 0 100
30
System
16
700
0
0
0
0
0
34
